/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => CustomModalsPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/filesManager/FilesManager.ts
var FilesManager = class {
  constructor(app2) {
    this.app = app2;
  }
  getExtraFileData(file) {
    return __async(this, null, function* () {
      var _a;
      return __spreadProps(__spreadValues({}, file), {
        frontmatter: (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter,
        contents: yield this.app.vault.cachedRead(file)
      });
    });
  }
  getModalFiles() {
    return __async(this, null, function* () {
      const root = this.app.vault.getRoot();
      const modalsFolder = __spreadValues({
        children: [],
        isRoot: () => false
      }, root.children.find((child) => child.name === "modals"));
      const modalFiles = modalsFolder.children.map((child) => app.vault.getAbstractFileByPath(child.path));
      return yield Promise.all(modalFiles.map((file) => __async(this, null, function* () {
        const extraData = yield this.getExtraFileData(file);
        return extraData;
      })));
    });
  }
};
var FilesManager_default = FilesManager;

// src/modal/CustomModal.ts
var import_obsidian = __toModule(require("obsidian"));
var CustomModal = class extends import_obsidian.Modal {
  constructor(plugin, customModalSettings) {
    super(plugin.app);
    this.plugin = plugin;
    this.customModalSettings = customModalSettings;
  }
  handleCallFunction(func2, args) {
    return __async(this, null, function* () {
      const isAsync = func2.constructor.name === "AsyncFunction";
      if (isAsync) {
        yield func2(...args);
      } else {
        func2(...args);
      }
    });
  }
  renderModal(ctx, obsidian) {
    this.titleEl.createEl("span", {
      text: this.customModalSettings.title
    });
    this.contentEl.createDiv({
      cls: "custom-modal-content"
    }).innerHTML = this.customModalSettings.content;
    const okButton = document.createElement("button");
    const okText = document.createTextNode(this.customModalSettings.okText);
    okButton.appendChild(okText);
    okButton.setAttribute("class", "modal-ok-btn");
    const cancelButton = document.createElement("button");
    const cancelText = document.createTextNode(this.customModalSettings.cancelText);
    cancelButton.appendChild(cancelText);
    cancelButton.setAttribute("class", "modal-cancel-btn");
    this.attatchEventListeners(ctx, obsidian, okButton, cancelButton);
    const modalFooter = this.contentEl.createDiv({
      cls: "custom-modal-footer"
    });
    modalFooter.appendChild(okButton);
    modalFooter.appendChild(cancelButton);
  }
  attatchEventListeners(ctx, obsidian, okButton, cancelButton) {
    this.plugin.registerDomEvent(okButton, "click", () => __async(this, null, function* () {
      if (this.customModalSettings.handleOk)
        this.customModalSettings.handleOk(ctx, obsidian);
      this.close();
    }));
    this.plugin.registerDomEvent(cancelButton, "click", () => __async(this, null, function* () {
      if (this.customModalSettings.handleCancel)
        this.customModalSettings.handleCancel(ctx, obsidian);
      this.close();
    }));
  }
  resetModal() {
    this.clearModalContent();
  }
  clearModalContent() {
    this.titleEl.innerText = "";
    this.contentEl.innerHTML = "";
  }
  onOpen() {
    return __async(this, null, function* () {
      const ctx = this.customModalSettings.ctx;
      const obsidian = {
        app: this.app,
        plugin: this.plugin,
        Notice: import_obsidian.Notice
      };
      try {
        yield this.customModalSettings.preRender(ctx, obsidian);
        this.renderModal(ctx, obsidian);
        this.customModalSettings.postRender(ctx, obsidian);
      } catch (err) {
        console.error(err);
      }
    });
  }
  onClose() {
    this.resetModal();
  }
};
var CustomModal_default = CustomModal;

// src/modal/CustomModalSettings.ts
var CustomModalSettings = class {
  constructor({
    title,
    content = "",
    okText = "Ok",
    cancelText = "Cancel",
    handleOk = () => {
    },
    handleCancel = () => {
    },
    preRender = () => {
    },
    postRender = () => {
    }
  }) {
    this.title = title;
    this.content = content;
    this.okText = okText;
    this.cancelText = cancelText;
    this.handleOk = handleOk;
    this.handleCancel = handleCancel;
    this.postRender = postRender;
    this.preRender = preRender;
    this.ctx = {};
  }
};

// src/modalFileParser/ModalFileParser.ts
var ModalFileParser = class {
  constructor() {
    this.contents = "";
  }
  selectBetweenStrings(str, start, end) {
    return str.substring(str.indexOf(start) + 1, str.lastIndexOf(end));
  }
  parseHtmlBlocks() {
    const { contents: contents2 } = this;
    const matcher2 = /^```(?:js|html)\n([\s\S]*?)```$/gm;
    const matches2 = contents2.match(matcher2);
    if (matches2)
      return matches2.map((match2) => {
        const matchTrimmed2 = match2.trim();
        const matchTrimmedLength2 = matchTrimmed2.length;
        const betweenCodeBlock2 = matchTrimmed2.substring(7, matchTrimmedLength2 - 3);
        const removedNewLines = betweenCodeBlock2.replace(/[\t\n]+/g, "");
        return removedNewLines;
      });
    return [];
  }
  parseJavaScriptBlocks() {
    const { contents } = this;
    const matcher = /^```(?:js|javascript)\n([\s\S]*?)```$/gm;
    const matches = contents.match(matcher);
    if (matches) {
      return matches.map((match) => {
        const matchTrimmed = match.trim();
        const matchTrimmedLength = matchTrimmed.length;
        const betweenCodeBlock = matchTrimmed.substring(13, matchTrimmedLength - 3);
        try {
          const func = eval(`async (ctx, obsidian) => { ${betweenCodeBlock} }`);
          return func;
        } catch (err) {
          console.error(err);
          return new Function("ctx", "obsidian", "return;");
        }
      });
    }
    return [];
  }
  parse(contents2) {
    this.contents = contents2 || "";
    const htmlBlocks = this.parseHtmlBlocks();
    const jsBlocks = this.parseJavaScriptBlocks();
    return {
      htmlBlocks,
      jsBlocks
    };
  }
};
var ModalFileParser_default = ModalFileParser;

// src/modalsManager/ModalsManager.ts
var ModalsManager = class {
  constructor(plugin, app2) {
    this.modals = {};
    this.modalSettings = {};
    this.modalFileParser = new ModalFileParser_default();
    this.plugin = plugin;
    this.app = app2;
  }
  createModalSettingsFromFile(file) {
    var _a, _b, _c;
    const { jsBlocks, htmlBlocks } = this.modalFileParser.parse(file.contents);
    const modalSettings = new CustomModalSettings({
      title: (_a = file.frontmatter) == null ? void 0 : _a.title,
      content: htmlBlocks.length ? htmlBlocks[0] : "",
      okText: (_b = file.frontmatter) == null ? void 0 : _b.okText,
      cancelText: (_c = file == null ? void 0 : file.frontmatter) == null ? void 0 : _c.cancelText,
      handleOk: jsBlocks.length ? jsBlocks[0] : void 0,
      handleCancel: jsBlocks.length > 1 ? jsBlocks[1] : void 0,
      preRender: jsBlocks.length > 2 ? jsBlocks[2] : void 0,
      postRender: jsBlocks.length > 3 ? jsBlocks[3] : void 0
    });
    this.modalSettings[file.path] = modalSettings;
  }
  createModalSettingsFromFilesData(allFiles) {
    allFiles.forEach((file) => {
      if (file.path.startsWith("modals/")) {
        this.createModalSettingsFromFile(file);
      }
    });
  }
  addModalCommand(path, modalSettings) {
    this.plugin.addCommand({
      id: `open-modal-${path.split("/")[1]}`,
      name: `Open ${modalSettings.title || "Modal"}`,
      callback: () => {
        this.modals[path].open();
      }
    });
  }
  createModals(allFiles) {
    this.createModalSettingsFromFilesData(allFiles);
    Object.entries(this.modalSettings).forEach(([path, modalSettings]) => {
      if (!modalSettings.title)
        return;
      this.modals[path] = new CustomModal_default(this.plugin, modalSettings);
      this.addModalCommand(path, modalSettings);
    });
  }
  createModal(file) {
    this.createModalSettingsFromFile(file);
    const settings = this.modalSettings[file.path];
    if (!settings.title)
      return;
    this.modals[file.path] = new CustomModal_default(this.plugin, this.modalSettings[file.path]);
    this.addModalCommand(file.path, this.modalSettings[file.path]);
  }
};
var ModalsManager_default = ModalsManager;

// src/main.ts
var CustomModalsPlugin = class extends import_obsidian2.Plugin {
  constructor(app2, manifest) {
    super(app2, manifest);
    this.filesManager = new FilesManager_default(app2);
    this.modalsManager = new ModalsManager_default(this, app2);
    this.handleCreateAndModify = this.handleCreateAndModify.bind(this);
    this.handleCacheResolve = this.handleCacheResolve.bind(this);
  }
  handleCreateAndModify(file) {
    return __async(this, null, function* () {
      if (file.path.startsWith("modals/")) {
        const extraData = yield this.filesManager.getExtraFileData(file);
        this.modalsManager.createModal(extraData);
      }
    });
  }
  handleCacheResolve(file) {
    return __async(this, null, function* () {
      if (file.path.startsWith("modals/")) {
        const extraData = yield this.filesManager.getExtraFileData(file);
        this.modalsManager.createModal(extraData);
      }
    });
  }
  onload() {
    return __async(this, null, function* () {
      const modalFiles = yield this.filesManager.getModalFiles();
      modalFiles.forEach((file) => {
        this.modalsManager.createModal(file);
      });
      this.registerEvent(this.app.vault.on("create", this.handleCreateAndModify));
      this.registerEvent(this.app.vault.on("modify", this.handleCreateAndModify));
      this.registerEvent(this.app.metadataCache.on("resolve", this.handleCacheResolve));
      console.log("Loaded Custom Modals");
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
